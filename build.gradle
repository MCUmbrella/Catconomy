plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'java'
}

String packagePath = 'ninekothecat.catconomy'
group(packagePath)
group = 'ninekothecat'
version = '0.0.5-1'
shadowJar {
    dependencies {
        include dependency('org.jetbrains.kotlin:kotlin-stdlib')
        include dependency('org.bstats:bstats-bukkit')
        include dependency('org.bstats:bstats-base')
        include dependency('com.github.MilkBowl:VaultAPI')
        include dependency('org.mapdb:mapdb')
    }
    dependencies{
        relocate('org.bstats', packagePath + '.dependencies.bstats')
    }

    archiveClassifier.set(null)
}
repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
}

dependencies {
    // https://mvnrepository.com/artifact/log4j/apache-log4j-extras
    implementation group: 'log4j', name: 'apache-log4j-extras', version: '1.2.17'
    implementation 'org.bstats:bstats-bukkit:2.2.1'
    implementation 'org.bstats:bstats-base:2.2.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'
    implementation group: 'org.mapdb', name: 'mapdb', version: '3.0.8'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.4.10"
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.27'
    compileOnly 'org.bukkit:bukkit:1.12-R0.1-SNAPSHOT'
    implementation "com.github.MilkBowl:VaultAPI:1.7"
}

artifacts { // task 'build' runs generates uberjar
    archives shadowJar
}

jar {
    archiveClassifier.set('min')
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
